)]}'
{"version":3,"sources":["msavin:mongol/common/common.js","msavin:mongol/client/row_header/header.html","msavin:mongol/client/row_header/header.js","msavin:mongol/client/row_account/account.html","msavin:mongol/client/row_account/account.js","msavin:mongol/client/row_account/accountViewer.html","msavin:mongol/client/row_account/accountViewer.js","msavin:mongol/client/row_collection/collections.html","msavin:mongol/client/row_collection/collections.js","msavin:mongol/client/doc_editor/docViewer.html","msavin:mongol/client/doc_editor/docViewer.js","msavin:mongol/client/doc_insert/docInsert.html","msavin:mongol/client/doc_insert/docInsert.js","msavin:mongol/client/row_subscriptions/subscriptions.html","msavin:mongol/client/row_subscriptions/subscriptions.js","msavin:mongol/client/Mongol.html","msavin:mongol/client/Mongol.js","msavin:mongol/client/doc_controls/docControls.html","msavin:mongol/client/doc_controls/docControls.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2B;;AAEA,kD;AACA,sE;AACA,qG;AACA,oC;AACA,+G;AACA,wD;;AAEA,c;;AAEA,C;;AAEA,2E;;AAEA,+C;;AAEA,6C;AACA,iE;AACA,uC;;AAEA,oH;AACA,sC;AACA,8D;;AAEA,gJ;AACA,wF;AACA,iI;;AAEA,U;AACA,wE;AACA,kH;;;AAGA,0D;;AAEA,+B;;AAEA,yD;;AAEA,G;AACA,E;AACA,E;;;;;;;;;;;;;;;;;;;;ACzCA,sC;AACA,gF;AACA,kB;AACA,mB;AACA,yB;AACA,4F;AACA,M;AACA,4B;AACA,owB;AACA,I;;;;;;;;;;;;;;;;;;;ACVA,+B;AACA,oC;AACA,mE;AACA,oD;AACA,Y;AACA,4D;AACA,K;AACA,I;AACA,2C;AACA,wB;AACA,oD;AACA,I;AACA,6C;AACA,wB;AACA,oC;AACA,K;AACA,6C;AACA,wB;AACA,G;AACA,G;;AAEA,gC;AACA,uB;AACA,mE;AACA,iC;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;AC1BA,uC;AACA,kF;AACA,kB;AACA,mB;AACA,yB;AACA,0E;AACA,M;AACA,8B;AACA,gC;AACA,qF;AACA,sD;AACA,iB;AACA,iC;AACA,sC;AACA,kB;AACA,iB;AACA,iC;AACA,wC;AACA,kB;AACA,+E;AACA,iC;AACA,kF;AACA,sD;AACA,iB;AACA,iG;AACA,iB;AACA,iC;AACA,2B;AACA,gG;AACA,O;AACA,6B;AACA,gC;AACA,+B;AACA,0E;AACA,sC;AACA,oC;AACA,sB;AACA,I;;;;;;;;;;;;;;;;;;;;ACrCA,iC;AACA,uB;AACA,oE;AACA,iC;AACA,K;AACA,I;AACA,8B;AACA,gC;AACA,kB;AACA,K;AACA,I;AACA,0B;AACA,yC;AACA,yH;AACA,G;AACA,G;;;AAGA,gC;AACA,oC;AACA,oE;AACA,oD;AACA,Y;AACA,6D;AACA,K;AACA,I;AACA,+C;AACA,wB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;AC7BA,6C;AACA,8F;AACA,kB;AACA,4F;AACA,yB;AACA,wF;AACA,M;AACA,gC;AACA,iC;AACA,4D;AACA,K;AACA,oE;AACA,6E;AACA,gB;AACA,I;;;;;;;;;;;;;;;;;;;ACfA,uC;AACA,4B;AACA,mC;AACA,wD;AACA,sD;AACA,qB;AACA,I;AACA,4B;;AAEA,kD;;AAEA,mB;AACA,oB;AACA,K;;AAEA,I;AACA,0B;;AAEA,kD;;AAEA,mB;AACA,+B;AACA,K;;AAEA,I;AACA,yB;AACA,2B;AACA,I;AACA,G;;;;;;;;;;;;;;;;;;;;AC3BA,0C;AACA,wF;AACA,kB;AACA,mB;AACA,yB;AACA,0E;AACA,M;AACA,oB;AACA,kE;AACA,K;AACA,gJ;AACA,6B;AACA,oC;AACA,0D;AACA,iB;AACA,kC;AACA,2B;AACA,wD;AACA,gE;AACA,e;AACA,uD;AACA,8D;AACA,6E;AACA,8B;AACA,wC;AACA,gD;AACA,qG;AACA,iC;AACA,0F;AACA,I;;AAEA,mD;AACA,0G;AACA,kB;AACA,sN;AACA,I;;;;;;;;;;;;;;;;;;;ACpCA,mC;AACA,uC;;AAEA,wC;AACA,kD;;AAEA,uE;;AAEA,+C;AACA,+D;AACA,oD;;AAEA,Y;;AAEA,4C;;AAEA,yD;AACA,yC;AACA,qC;AACA,mC;AACA,O;;AAEA,gE;;AAEA,K;;AAEA,I;AACA,+C;AACA,wB;AACA,G;AACA,G;;AAEA,oC;AACA,uB;;AAEA,oE;AACA,sC;;AAEA,iD;AACA,iC;AACA,K;;AAEA,I;AACA,gC;;AAEA,sC;AACA,0D;;AAEA,mE;;AAEA,iB;;AAEA,I;AACA,gC;;AAEA,wC;AACA,kD;;AAEA,0C;AACA,4B;;AAEA,iB;;AAEA,G;AACA,G;;;;;;;;;;;;;;;;;;;;AC/DA,yC;AACA,sF;AACA,kB;AACA,8B;AACA,mD;AACA,iB;AACA,0H;AACA,2D;AACA,mB;AACA,gD;AACA,wD;AACA,qB;AACA,yC;AACA,+B;AACA,8F;AACA,Y;AACA,0B;AACA,2E;AACA,Y;AACA,uC;AACA,kE;AACA,W;AACA,oF;AACA,oF;AACA,yC;AACA,qB;AACA,yC;AACA,+B;AACA,8F;AACA,Y;AACA,0B;AACA,2E;AACA,Y;AACA,uC;AACA,kE;AACA,W;AACA,kD;AACA,gE;AACA,uB;AACA,4F;AACA,sF;AACA,gC;AACA,uB;AACA,qE;AACA,oB;AACA,yD;AACA,2D;AACA,c;AACA,yB;AACA,0E;AACA,+B;AACA,wC;AACA,qB;AACA,mB;AACA,qC;AACA,yC;AACA,wB;AACA,wE;AACA,S;AACA,gF;AACA,iB;AACA,iB;AACA,4F;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACjEA,mC;AACA,+B;AACA,sC;AACA,8D;AACA,qD;AACA,8C;AACA,4C;AACA,0C;AACA,sB;AACA,I;AACA,6B;AACA,0B;AACA,oE;;AAEA,uC;AACA,qD;AACA,Y;AACA,6B;AACA,K;;AAEA,oB;;AAEA,I;AACA,4B;;AAEA,kD;;AAEA,mB;AACA,oB;AACA,K;;AAEA,I;AACA,0B;;AAEA,kD;;AAEA,mB;AACA,+B;AACA,K;;AAEA,I;AACA,yB;AACA,+G;AACA,6B;AACA,kB;AACA,K;AACA,I;AACA,gC;AACA,gD;AACA,G;AACA,G;;AAEA,wD;AACA,oC;;AAEA,+C;AACA,4E;AACA,wC;AACA,kB;AACA,sD;AACA,E;;AAEA,K;;;;;;;;;;;;;;;;;;;;AC7DA,yC;AACA,sF;AACA,kB;AACA,wL;AACA,sC;AACA,oB;AACA,8E;AACA,M;AACA,mB;AACA,2B;AACA,oD;AACA,I;;;;;;;;;;;;;;;;;;;ACZA,kC;AACA,+C;;AAEA,sC;AACA,yD;AACA,iE;AACA,iD;;AAEA,oB;AACA,wF;AACA,qB;AACA,kD;AACA,qC;AACA,gB;AACA,wC;AACA,S;AACA,S;AACA,8C;AACA,K;;AAEA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACpBA,6C;AACA,8F;AACA,kB;AACA,mB;AACA,yB;AACA,0E;AACA,M;AACA,mC;AACA,gC;AACA,oJ;AACA,iC;AACA,uB;AACA,8B;AACA,6B;AACA,uD;AACA,sD;AACA,+E;AACA,qC;AACA,qC;AACA,uD;AACA,iB;AACA,iC;AACA,oC;AACA,4B;AACA,2C;AACA,qB;AACA,sB;AACA,c;AACA,8B;AACA,yC;AACA,6C;AACA,qD;AACA,oE;AACA,uD;AACA,8B;AACA,iB;AACA,mD;AACA,mE;AACA,I;;AAEA,8C;AACA,gG;AACA,kB;AACA,oZ;AACA,I;;;;;;;;;;;;;;;;;;;AC7CA,uC;AACA,uB;AACA,0E;AACA,iC;AACA,K;AACA,I;AACA,6B;;AAEA,0D;AACA,2B;;AAEA,I;AACA,qB;AACA,wH;AACA,mB;AACA,I;AACA,uB;AACA,mH;;AAEA,4B;AACA,e;AACA,Y;AACA,oB;AACA,K;AACA,I;AACA,wB;AACA,I;AACA,0B;AACA,sC;AACA,Y;AACA,iC;AACA,K;AACA,I;AACA,G;AACA,G;;;AAGA,wC;AACA,sC;AACA,4E;AACA,sD;AACA,c;AACA,qE;AACA,O;AACA,M;AACA,sD;AACA,2D;AACA,M;AACA,iD;AACA,0B;AACA,K;AACA,K;;;AAGA,2B;AACA,+D;AACA,0B;;AAEA,0C;AACA,+B;AACA,oC;AACA,kB;AACA,M;AACA,oC;AACA,wB;AACA,K;AACA,M;;AAEA,yC;AACA,oD;AACA,iB;AACA,M;AACA,wC;;AAEA,2B;AACA,mB;AACA,I;AACA,wC;AACA,oE;AACA,8B;AACA,O;AACA,I;AACA,6C;AACA,uB;AACA,+B;AACA,2B;AACA,gB;AACA,iD;AACA,S;AACA,O;;AAEA,uB;;AAEA,K;AACA,M;;;;;;;;;;;;;;;;;;;AC7FA,sC;AACA,kB;AACA,0D;AACA,I;AACA,+C;;AAEA,+B;AACA,kE;AACA,kB;AACA,8B;AACA,qD;AACA,iB;AACA,mC;AACA,mB;AACA,2B;AACA,4E;AACA,O;AACA,0C;AACA,2D;AACA,mB;AACA,gG;AACA,mB;AACA,4F;AACA,iH;AACA,2D;AACA,mB;AACA,mG;AACA,0C;AACA,+D;AACA,mB;AACA,gG;AACA,mB;AACA,yG;AACA,wC;AACA,2D;AACA,mB;AACA,2F;AACA,+B;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACxCA,yB;AACA,mC;AACA,6C;AACA,2E;AACA,I;AACA,uB;AACA,mE;AACA,2B;AACA,gG;AACA,K;AACA,G;AACA,G;;;AAGA,uB;;AAEA,iB;AACA,+B;AACA,iC;AACA,kC;AACA,gD;AACA,K;AACA,mF;AACA,mJ;AACA,gC;AACA,6B;AACA,+B;AACA,6B;AACA,gB;AACA,gC;AACA,S;AACA,4C;AACA,+B;AACA,sC;AACA,4B;AACA,O;AACA,8D;AACA,O;AACA,I;AACA,wC;;AAEA,wC;AACA,+D;;AAEA,mB;;AAEA,I;AACA,4B;;AAEA,mB;AACA,wB;AACA,8G;AACA,c;AACA,uB;AACA,wE;AACA,c;AACA,oB;AACA,qE;AACA,c;AACA,oB;AACA,sE;AACA,c;AACA,oB;AACA,sG;AACA,c;AACA,wB;AACA,8B;AACA,yL;AACA,c;AACA,qC;AACA,c;AACA,K;;AAEA,I;AACA,4B;AACA,0B;;AAEA,S;AACA,mC;AACA,qB;AACA,wC;AACA,K;;AAEA,qB;;AAEA,I;AACA,sC;;AAEA,oE;AACA,sD;;AAEA,mD;;AAEA,G;AACA,E;;;AAGA,a;;AAEA,2B;AACA,E;AACA,6D;AACA,4B;AACA,4C;;AAEA,kC;AACA,kC;;AAEA,8E;;AAEA,+F;AACA,6B;;AAEA,O;;AAEA,oB;AACA,iC;AACA,M;;AAEA,oC;;AAEA,G;AACA,G;;;AAGA,qF;;AAEA,mD;;AAEA,iD;AACA,iD;;AAEA,uD;;AAEA,yC;;AAEA,sC;AACA,E;AACA,C;;AAEA,4B;AACA,sD;AACA,kD;AACA,mD;AACA,oD;AACA,G;;;;;;;;;;;;;;;;;;;AChJA,2C;AACA,0F;AACA,kB;AACA,8B;AACA,iD;AACA,iB;AACA,mC;AACA,2B;AACA,gG;AACA,O;AACA,qC;AACA,oD;AACA,mB;AACA,mC;AACA,iC;AACA,yC;AACA,sD;AACA,qB;AACA,uC;AACA,sC;AACA,qD;AACA,qC;AACA,0C;AACA,uC;AACA,kC;AACA,qB;AACA,6N;AACA,yD;AACA,6G;AACA,qC;AACA,8D;AACA,+B;AACA,mB;AACA,mC;AACA,iC;AACA,yC;AACA,sD;AACA,qB;AACA,uC;AACA,sC;AACA,qD;AACA,qC;AACA,0C;AACA,uC;AACA,kC;AACA,qB;AACA,uC;AACA,kC;AACA,4C;AACA,iC;AACA,+C;AACA,oC;AACA,4C;AACA,+B;AACA,2F;AACA,W;AACA,yB;AACA,2B;AACA,kB;AACA,mC;AACA,+B;AACA,yF;AACA,W;AACA,yB;AACA,2B;AACA,kB;AACA,yB;AACA,+B;AACA,4B;AACA,iB;AACA,iC;AACA,+B;AACA,0B;AACA,+B;AACA,+B;AACA,qB;AACA,c;AACA,qC;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AChFA,uE;;AAEA,0C;AACA,wB;AACA,mC;AACA,4B;AACA,a;AACA,K;AACA,4B;AACA,K;AACA,sB;AACA,C;;AAEA,iC;;AAEA,6C;AACA,kC;AACA,gD;AACA,G;AACA,8C;AACA,6D;AACA,mD;AACA,S;AACA,C;;AAEA,oC;AACA,qC;;AAEA,iE;AACA,+D;AACA,2E;AACA,yE;;AAEA,8D;AACA,uC;AACA,4C;;AAEA,4E;;AAEA,2G;AACA,mB;;AAEA,gE;;AAEA,yC;AACA,sE;AACA,6B;;AAEA,uD;AACA,mC;AACA,2B;AACA,a;AACA,Y;;AAEA,oD;AACA,S;;AAEA,c;AACA,yC;AACA,O;AACA,O;;;;AAIA,I;AACA,sC;AACA,yC;AACA,I;AACA,wC;;AAEA,iE;AACA,4C;AACA,+C;AACA,2E;AACA,yE;;AAEA,8D;AACA,uC;;;;AAIA,sF;;AAEA,mB;AACA,yB;AACA,8F;AACA,qC;;AAEA,8B;AACA,sD;AACA,6C;AACA,+C;AACA,S;;AAEA,6C;AACA,qC;AACA,S;;;AAGA,c;AACA,sC;AACA,O;;AAEA,O;;;;AAIA,I;AACA,uC;AACA,6C;AACA,8D;AACA,M;AACA,oE;AACA,uC;AACA,G;AACA,qB;AACA,4C;;AAEA,2B;AACA,wD;AACA,+C;AACA,qC;AACA,K;AACA,I;AACA,sC;;AAEA,6C;AACA,6D;;AAEA,oE;AACA,uC;AACA,M;AACA,qB;AACA,4C;;AAEA,wB;AACA,wD;AACA,+C;AACA,oC;AACA,K;;AAEA,I;AACA,yC;;AAEA,oD;AACA,mF;AACA,0C;;AAEA,8G;;AAEA,oE;AACA,mE;AACA,mD;AACA,oC;AACA,uC;AACA,8B;AACA,gC;AACA,Y;AACA,kD;AACA,iD;AACA,6E;AACA,oE;AACA,mD;AACA,0D;AACA,K;;AAEA,oB;AACA,2H;AACA,qB;AACA,+C;AACA,gC;AACA,gB;AACA,uC;AACA,S;AACA,S;AACA,K;AACA,I;AACA,2C;AACA,yC;AACA,I;AACA,yC;AACA,oB;AACA,I;AACA,G;;;AAGA,qC;AACA,6B;AACA,8C;AACA,kD;AACA,sC;AACA,0D;;AAEA,2D;;AAEA,8C;AACA,iC;AACA,K;;AAEA,I;AACA,uB;AACA,iD;AACA,mB;AACA,I;AACA,6B;AACA,8C;AACA,e;AACA,sC;AACA,K;AACA,I;AACA,4B;AACA,8C;AACA,kD;;AAEA,+B;AACA,iC;AACA,K;;AAEA,I;AACA,sC;AACA,kD;;AAEA,mB;AACA,sC;AACA,K;;AAEA,I;AACA,sB;;AAEA,0D;;AAEA,6C;AACA,mC;AACA,kB;AACA,K;;AAEA,yC;AACA,oC;AACA,kB;AACA,K;;AAEA,I;AACA,uB;;AAEA,oE;AACA,8C;AACA,iB;AACA,Y;AACA,kB;AACA,K;AACA,I;;AAEA,G;;AAEA,wD;AACA,oC;AACA,8C;AACA,0E;AACA,sC;AACA,gB;AACA,oD;AACA,C;AACA,K","file":"/packages/msavin_mongol.js","sourcesContent":["if (Mongol === undefined) {\n\n  // Reserve this variable name across the package\n  // In case we'd like to export it to give package users a simple api\n  // e.g. when all collections have been matched by default, but the developer wants to suppress some\n  // Mongol.hideCollection('posts');\n  // Downside is that it pollutes the global namespace with `Mongol`, but most apps can probably live with that\n  // See /client/defaults/defaults.js for implementation\n\n  Mongol = {};\n\n}\n\n// Go through a variety of means of trying to return the correct collection\n\nMongol.Collection = function (collectionName) {\n\n  return Mongo.Collection.get(collectionName)\n    // This should automatically match all collections by default\n    // including namespaced collections\n\n  || ((Meteor.isServer) ? eval(collectionName) : Meteor._get.apply(null,[window].concat(collectionName.split('.'))))\n  // For user defined collection names\n  // in the form of Meteor's Mongo.Collection names as strings\n\n  || ((Meteor.isServer) ? eval(firstToUpper(collectionName)) : Meteor._get.apply(null,[window].concat(firstToUpper(collectionName).split('.'))))\n  // For user defined collections where the user has typical upper-case collection names\n  // but they've put actual mongodb collection names into the Mongol config instead of Meteor's Mongo.Collection names as strings\n\n  || null;\n  // If the user has gone for unconventional casing of collection names,\n  // they'll have to get them right (i.e. Meteor's Mongo.Collection names as string) in the Mongol config manually\n\n\n  // Changes the first character of a string to upper case\n\n  function firstToUpper(text) {\n\n    return text.charAt(0).toUpperCase() + text.substr(1);\n\n  }\n  \n};\n","\nTemplate.__checkName(\"Mongol_header\");\nTemplate[\"Mongol_header\"] = new Template(\"Template.Mongol_header\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"Mongol_row \", Spacebars.mustache(view.lookup(\"active\")), \" Mongol_header\" ];\n    },\n    id: \"Mongol_cmongol_618\"\n  }, HTML.Raw('\\n\\n    <div style=\"float: right\" class=\"Mongol_Minimize\" title=\"Minimize\">_</div>\\n    <!-- <div style=\"float: right\" class=\"Mongol_FullScreen\" title=\"Fullscreen\">&#x2b1c;</div> -->\\n\\n    <strong>Mongol</strong><br>\\n    <div class=\"Mongol_contentView\">\\n    <!--  -->\\n      <div class=\"Mongol_docMenu\" style=\"text-indent: 8px\">\\n        by Meteor Toys\\n      </div>\\n      <div class=\"Mongol_documentViewer \">\\n\\n        Created by <a href=\"http://maxsavin.com\"><u>Max Savin</u></a>.<br>\\n        Learn more at <a href=\"https://github.com/msavin/Mongol\"><u>GitHub</u></a>.<br>\\n        Issued under <a href=\"https://github.com/msavin/Mongol/blob/master/README.md\"><u> MIT License</u></a>.<br>\\n        \\n\\n      </div>\\n    <!--  -->\\n    </div>\\n  '));\n}));\n","Template.Mongol_header.events({\n  'click .Mongol_row': function () {\n    if (Session.equals(\"Mongol_currentCollection\", \"mongol_618\")) {\n      Session.set(\"Mongol_currentCollection\", null);\n    } else {\n      Session.set(\"Mongol_currentCollection\", \"mongol_618\");\n    }\n  },\n  'click .Mongol_Minimize' : function (e) {\n    e.stopPropagation();\n    Session.set(\"Mongol_currentCollection\", null);  \n  },\n  'click .Mongol_FullScreen' : function (e) {\n    e.stopPropagation();\n\t  MongolPackage.toggleFullScreen();\n  }, \n  'click .Mongol_contentView': function (e) {\n    e.stopPropagation();\n  }\n});\n\nTemplate.Mongol_header.helpers({\n  active: function () {\n    if (Session.equals(\"Mongol_currentCollection\", \"mongol_618\")) {\n      return \"Mongol_row_expand\";\n    }\n  }\n});\n","\nTemplate.__checkName(\"Mongol_account\");\nTemplate[\"Mongol_account\"] = new Template(\"Template.Mongol_account\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"Mongol_row \", Spacebars.mustache(view.lookup(\"active\")) ];\n    },\n    id: \"Mongol_caccount_618\",\n    style: \"white-space:normal;\"\n  }, HTML.Raw(\"\\n\t\t\\n\t\t\t<!-- Display sign in status -->\\n\t\t\t\"), Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_account_active\"\n    }), \"\\n\t\t\t\" ];\n  }, function() {\n    return [ \"\\n\t\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_account_inactive\"\n    }), \"\\n\t\t\t\" ];\n  }), HTML.Raw(\"\\n\\n\t\t\t<!-- Name -->\\n\t\t\tAccount\\n     \\n        \"), HTML.DIV({\n    \"class\": \"Mongol_contentView\"\n  }, \"\\n\t\t\t\", HTML.Raw(\"<!-- Document Viewer -->\"), \"\\n\t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_accountViewer\")), \"\\n\t\t\t\" ];\n  }, function() {\n    return [ \"\\n\t\t\t\t\", HTML.DIV({\n      \"class\": function() {\n        return [ \"Mongol_docMenu \", Spacebars.mustache(view.lookup(\"Mongol_docMenu_editing\")) ];\n      }\n    }, \"\\n\t\t\t\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_docBar1\",\n      style: \"text-indent: 8px\"\n    }, \"\\n\t\t\t\t\t\t\tNot Signed In\\n\t\t\t\t\t\t\"), \"\\n\t\t\t\t\t\"), \"\\n\t\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_documentViewer\"\n    }, \"\t\\n\t\t\t\t\t\\n\t\t\t\t\"), \"\\n\t\t\t\" ];\n  }), \"\\n\t\t\"), \"\\n\t\");\n}));\n","\nTemplate.Mongol_account.helpers({\n  active: function () {\n    if (Session.equals(\"Mongol_currentCollection\", \"account_618\")) {\n      return \"Mongol_row_expand\";\n    }\n  },\n  hasAccountsUI: function () {\n    if (Template.loginButtons) {\n      return true;\n    }\n  },\n  canSignIn: function () {\n    // Not reactive, but it'll have to do\n    return !!Package['accounts-base'] && !!Package['accounts-ui'] && !Meteor.userId() && $('#login-sign-in-link').length;\n  }\n});\n\n\nTemplate.Mongol_account.events({\n  'click .Mongol_row': function () {\n    if (Session.equals(\"Mongol_currentCollection\", \"account_618\")) {\n      Session.set(\"Mongol_currentCollection\", null);\n    } else {\n      Session.set(\"Mongol_currentCollection\", \"account_618\");\n    }\n  },\n  'click .Mongol_contentView': function(e, t) {\n    e.stopPropagation();\n  }\n});\n","\nTemplate.__checkName(\"Mongol_accountViewer\");\nTemplate[\"Mongol_accountViewer\"] = new Template(\"Template.Mongol_accountViewer\", (function() {\n  var view = this;\n  return [ Spacebars.include(view.lookupTemplate(\"Mongol_docControls\")), \"\\n\\n\t\", HTML.DIV({\n    \"class\": function() {\n      return [ \"Mongol_documentViewer \", Spacebars.mustache(view.lookup(\"editStyle\")) ];\n    },\n    id: \"MongolDoc_account_618\",\n    contenteditable: function() {\n      return Spacebars.mustache(view.lookup(\"editContent\"));\n    }\n  }, \"\t\\n\t\t\", HTML.PRE(Blaze.View(\"lookup:accountData\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"accountData\")));\n  })), \"\\n\t\") ];\n}));\n","Template.Mongol_accountViewer.helpers({\n  accountData: function () {\n    var docCurrent = Meteor.user(),\n      json_output = JSON.stringify(docCurrent, null, 2),\n      colorized = MongolPackage.colorize(json_output);\n    return colorized;\n  },\n  editContent: function () {\n\n    var editMode = Session.get(\"Mongol_editMode\");\n\n    if (editMode) {\n      return \"true\";\n    }\n\n  },\n  editStyle: function () {\n\n    var editMode = Session.get(\"Mongol_editMode\");\n\n    if (editMode) {\n      return \"Mongol_editable\";\n    }\n\n  },\n  usercode: function () {\n    return Meteor.userId();\n  },\n});\n","\nTemplate.__checkName(\"Mongol_collection\");\nTemplate[\"Mongol_collection\"] = new Template(\"Template.Mongol_collection\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"Mongol_row \", Spacebars.mustache(view.lookup(\"active\")) ];\n    },\n    id: function() {\n      return [ \"Mongol_c\", Spacebars.mustache(view.lookup(\".\")) ];\n    }\n  }, HTML.Raw('\\n\t\t\\n        <!-- <div class=\"Mongol_toggle_selected_collection\"> -->\\n        \\n\t\t\t<!-- Collection Count -->\\n\t\t\t'), HTML.DIV({\n    \"class\": \"Mongol_counter\"\n  }, \"\\n\t\t\t\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"collectionCount\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\", HTML.SPAN({\n      \"class\": \"MongolHide\"\n    }, Blaze.View(\"lookup:currentPosition\", function() {\n      return Spacebars.mustache(view.lookup(\"currentPosition\"));\n    }), \"/\") ];\n  }), Blaze.View(\"lookup:collectionCount\", function() {\n    return Spacebars.mustache(view.lookup(\"collectionCount\"));\n  }), \"\\n\t\t\t\"), HTML.Raw(\"\\n\t\\n\t\t\t<!-- Collection Name -->\\n\t\t\t\"), HTML.DIV({\n    \"class\": \"Mongol_row_name\"\n  }, Blaze.View(\"lookup:.\", function() {\n    return Spacebars.mustache(view.lookup(\".\"));\n  })), HTML.Raw(\"\\n    \t    \\n        <!-- </div> -->\\n\\n\t\t<!-- Document Viewer -->\\n\t\t\"), HTML.DIV({\n    \"class\": \"Mongol_contentView\"\n  }, \"\\n\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_docViewer\")), \"\\n\t\t\"), \"\\n\t\");\n}));\n\nTemplate.__checkName(\"Mongol_collection_notFound\");\nTemplate[\"Mongol_collection_notFound\"] = new Template(\"Template.Mongol_collection_notFound\", (function() {\n  var view = this;\n  return HTML.Raw('<div class=\"Mongol_empty\">\\n\t\tNo collections found. If you think this is an error, please report it on\\n\t\t<a href=\"https://github.com/msavin/Mongol\" style=\"color: #cc0000\">GitHub</a>.\\n\t</div>');\n}));\n","Template.Mongol_collection.events({\n  'click .Mongol_row': function (evt) {\n\n    var targetCollection = String(this);\n    var sessionKey = \"Mongol_\" + targetCollection;\n\n    if (Session.equals(\"Mongol_currentCollection\", targetCollection)) {\n\n      // either do nothing or collapse the pane\n      // comment out the line below for not collapsing the pane\n      Session.set(\"Mongol_currentCollection\", null);\n\n    } else {\n\n      Session.set(\"Mongol_editMode\", false);\n\n      // If the collection doesn't have an index key set,\n      // start it from the first document\n      if (!Session.get(sessionKey)) {\n        Session.set(sessionKey, 0);\n      }\n\n      Session.set(\"Mongol_currentCollection\", targetCollection);\n\n    }\n\n  },\n  'click .Mongol_contentView': function(e, t) {\n    e.stopPropagation();\n  }\n});\n\nTemplate.Mongol_collection.helpers({\n  active: function () {\n\n    var currentCollection = Session.get(\"Mongol_currentCollection\"),\n      targetCollection = String(this);\n\n    if (currentCollection === targetCollection) {\n      return \"Mongol_row_expand\";\n    }\n\n  },\n  collectionCount: function () {\n\n    var collectionName = String(this);\n    var collectionVar = Mongol.Collection(collectionName);\n\n    var count = collectionVar && collectionVar.find().count() || 0;\n\n    return count;\n\n  },\n  currentPosition: function () {\n\n    var targetCollection = String(this);\n    var sessionKey = \"Mongol_\" + targetCollection;\n\n    var current = Session.get(sessionKey);\n    var count = current + 1;\n\n    return count;\n\n  }\n});\n","\nTemplate.__checkName(\"Mongol_docViewer\");\nTemplate[\"Mongol_docViewer\"] = new Template(\"Template.Mongol_docViewer\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"notEmpty\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"Mongol_docControls\")), \"\\n    \", Spacebars.With(function() {\n      return Spacebars.call(view.lookup(\"activeDocument\"));\n    }, function() {\n      return [ \"\\n      \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"editStyle\"));\n      }, function() {\n        return [ \"\\n        \", HTML.DIV({\n          \"class\": function() {\n            return [ \"Mongol_documentViewer \", Spacebars.mustache(view.lookup(\"editStyle\")) ];\n          },\n          id: function() {\n            return [ \"MongolDoc_\", Spacebars.mustache(view.lookup(\"..\")) ];\n          },\n          contenteditable: function() {\n            return Spacebars.mustache(view.lookup(\"editContent\"));\n          }\n        }, \"  \\n          \", HTML.PRE(Blaze.View(\"lookup:documentJSON\", function() {\n          return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"documentJSON\")));\n        })), \"\\n        \"), \"\\n      \" ];\n      }, function() {\n        return [ \"\\n        \", HTML.DIV({\n          \"class\": function() {\n            return [ \"Mongol_documentViewer \", Spacebars.mustache(view.lookup(\"editStyle\")) ];\n          },\n          id: function() {\n            return [ \"MongolDoc_\", Spacebars.mustache(view.lookup(\"..\")) ];\n          },\n          contenteditable: function() {\n            return Spacebars.mustache(view.lookup(\"editContent\"));\n          }\n        }, \"  \\n          \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"noInlineEditing\"));\n        }, function() {\n          return [ \"\\n            \", HTML.PRE(Blaze.View(\"lookup:documentJSON\", function() {\n            return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"documentJSON\")));\n          })), \"\\n          \" ];\n        }, function() {\n          return [ \"\\n            \", Blaze._TemplateWith(function() {\n            return {\n              document: Spacebars.call(view.lookup(\".\")),\n              collection: Spacebars.call(view.lookup(\"..\"))\n            };\n          }, function() {\n            return Spacebars.include(view.lookupTemplate(\"editableJSON\"));\n          }), \"\\n          \" ];\n        }), \"\\n        \"), \"\\n      \" ];\n      }), \"\\n    \" ];\n    }, function() {\n      return [ \"\\n      \", HTML.DIV({\n        \"class\": \"Mongol_documentViewer\",\n        id: function() {\n          return [ \"MongolDoc_\", Spacebars.mustache(view.lookup(\".\")) ];\n        }\n      }, \"  \\n        \", HTML.PRE(\"No document found\"), \"\\n      \"), \"\\n    \" ];\n    }), \"\\n  \" ];\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"Mongol_docInsert\")), \"\\n  \" ];\n  });\n}));\n","Template.Mongol_docViewer.helpers({\n  activeDocument: function () {\n    var collectionName = String(this);\n    var currentCollection = Mongol.Collection(collectionName);\n    var documents = currentCollection.find().fetch();\n    var sessionKey = \"Mongol_\" + String(this);\n    var docNumber = Session.get(sessionKey);\n    var docCurrent = documents[docNumber];\n    return docCurrent;\n  },\n  documentJSON: function () {\n    var docCurrent = this;\n    var json_output = JSON.stringify(docCurrent, null, 2), colorize;\n\n    if (!(json_output === undefined)) {\n      colorize = MongolPackage.colorize(json_output);\n    } else {\n      colorize = json_output;\n    }\n\n    return colorize;\n\n  },\n  editContent: function () {\n\n    var editMode = Session.get(\"Mongol_editMode\");\n\n    if (editMode) {\n      return \"true\";\n    }\n\n  },\n  editStyle: function () {\n\n    var editMode = Session.get(\"Mongol_editMode\");\n\n    if (editMode) {\n      return \"Mongol_editable\";\n    }\n\n  },\n  notEmpty: function () {\n    var documentCount = Mongol.Collection(String(this)) && Mongol.Collection(String(this)).find().count() || 0;\n    if (documentCount >= 1) {\n      return true;\n    }\n  },\n  noInlineEditing: function () {\n\treturn Session.get('Mongol_noInlineEditing');  \n  }\n});\n\n// Will possibly be used in augmented document udpate UI\n/*Template.Mongol_docViewer.events({\n\n\t'click .Mongol_string' : function (evt,tmpl) {\n\t\tvar field = $(evt.target).prevAll(\".Mongol_key:first\").text().slice(1,-2);\n\t\tSession.set('Mongol_inlineEdit',true);\n\t\tTracker.flush();\n\t\t// Do something to trigger the editable text element\n\t}\n\n});*/\n","\nTemplate.__checkName(\"Mongol_docInsert\");\nTemplate[\"Mongol_docInsert\"] = new Template(\"Template.Mongol_docInsert\", (function() {\n  var view = this;\n  return [ HTML.Raw('<div class=\"Mongol_docMenu\">\\n\t\t<div class=\"Mongol_docMenu_insert\" style=\"float: right\">Insert</div>\\n\t\t&nbsp;Create the First Document\\n\t</div>\\n\\n\t'), HTML.DIV({\n    \"class\": \"Mongol_documentViewer \",\n    id: function() {\n      return [ \"Mongol_\", Spacebars.mustache(view.lookup(\".\")), \"_newEntry\" ];\n    },\n    tabindex: \"-1\",\n    contenteditable: \"true\"\n  }, \"\t\\n\", HTML.Raw(\"<pre>{\\n\\n}</pre>\"), \"\\n\t\") ];\n}));\n","Template.Mongol_docInsert.events({\n  'click .Mongol_docMenu_insert': function () {\n\n    var CollectionName = String(this),\n      newDataID = \"Mongol_\" + String(this) + \"_newEntry\";\n    var newData = document.getElementById(newDataID).textContent;\n    var newObject = MongolPackage.parse(newData);\n\n    if (newObject) {\n      Meteor.call('Mongol_insert', CollectionName, newObject, function (error, result) {\n        if (!error) {\n          sessionKey = \"Mongol_\" + CollectionName;\n          Session.set(sessionKey, 0);\n        } else {\n          MongolPackage.error(\"insert\");\n        }\n      });\n      // if successful, set the proper session\n    }\n\n  }\n});\n","\nTemplate.__checkName(\"Mongol_subscriptions\");\nTemplate[\"Mongol_subscriptions\"] = new Template(\"Template.Mongol_subscriptions\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"Mongol_row \", Spacebars.mustache(view.lookup(\"active\")) ];\n    },\n    id: \"Mongol_subscriptions_618\",\n    style: \"white-space:normal;\"\n  }, HTML.Raw('\\n\t\t\\n        <div class=\"Mongol_toggle_selected_collection\">\\n\t\t\t<!-- Name -->\\n\t\t\tSubscriptions\\n        </div>\\n\\n\t\t'), HTML.DIV({\n    \"class\": \"Mongol_contentView\"\n  }, \"\\n\t\t\", HTML.DIV({\n    \"class\": \"Mongol_docMenu\",\n    style: \"text-indent: 8px\"\n  }, \"\\n\t\t\t\", Blaze.View(\"lookup:subType\", function() {\n    return Spacebars.mustache(view.lookup(\"subType\"));\n  }), \"\\n\t\t\"), \"\\n\t\t\", HTML.Raw(\"<!-- Document Viewer -->\"), \"\\n\t\t\", HTML.DIV({\n    \"class\": \"Mongol_documentViewer \"\n  }, \"\\n\t\t\t\", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"subscription\"));\n  }, function() {\n    return [ \"\\n\t\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_subscription\"\n    }, \"\\n\t\t\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_subscription_toggle\"\n    }, HTML.CharRef({\n      html: \"&times;\",\n      str: \"×\"\n    })), \"\\n\t\t\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_subscription_name\"\n    }, Blaze.View(\"lookup:name\", function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    })), \"\\n\t\t\t\t\tParams: \", Blaze.View(\"lookup:params\", function() {\n      return Spacebars.mustache(view.lookup(\"params\"));\n    }), \" \\n\t\t\t\t\"), \"\\n\t\t\t\" ];\n  }, function() {\n    return \"\\n\t\t\t\tNo subscriptions available\\n\t\t\t\";\n  }), \"\\n\t\t\"), \"\\n\t\t\", HTML.Raw(\"<!--  -->\"), \"\\n\t\"), \"\\n\t\t\\n\\n\t\");\n}));\n\nTemplate.__checkName(\"Mongol_subscriptionsx\");\nTemplate[\"Mongol_subscriptionsx\"] = new Template(\"Template.Mongol_subscriptionsx\", (function() {\n  var view = this;\n  return HTML.Raw('<!-- Ssshh... this is supposed to be a surprise :) -->\\n\\n\\n<!-- \t<div id=\"createNewSub\">New Sub</div>\\n\\n\t{{#each subscription}}\\n\t\tID: {{this.id}}\\n\t\tName: {{this.name}}<br>\\n\\n\t\t{{#each subscriptionParams}}\\n\t\t\tParam: {{this}}<br>\\n\t\t{{/each}}\\n\t\t<div style=\"background: #cc0000; display: inline-block\" class=\"Mongol_stop_subscription\">\\n\t\t\tSTOP\\n\t\t</div>\\n\t\t<hr>\\n\t{{/each}} -->');\n}));\n","Template.Mongol_subscriptions.helpers({\n  active: function () {\n    if (Session.equals(\"Mongol_currentCollection\", \"subscriptions_618\")) {\n      return \"Mongol_row_expand\";\n    }\n  },\n  subscription: function () {\n\n    var subscriptionIDs = Session.get(\"MeteorToys_PubSub\")\n    return subscriptionIDs;\n\n  },\n  name: function () {\n    var subName = Meteor.default_connection._subscriptions[this] && Meteor.default_connection._subscriptions[this].name;\n    return subName;\n  },\n  params: function () {\n    var p = Meteor.default_connection._subscriptions[this] && Meteor.default_connection._subscriptions[this].params\n\n    if (p && p.length > 0) {\n      return p;\n    } else {\n      return \"none\";\n    }\n  },\n  subType: function () {\n    \n    if (!Object.observe) {\n      return \"Polling every 3 seconds\"\n    } else {\n      return \"Observing Changes\";\n    }\n    \n  }\n});\n\n\n  Template.Mongol_subscriptions.events({\n    'click .Mongol_row': function () {\n      if (Session.equals(\"Mongol_currentCollection\", \"subscriptions_618\")) {\n        Session.set(\"Mongol_currentCollection\", null);\n      } else {\n        Session.set(\"Mongol_currentCollection\", \"subscriptions_618\");\n      }\n    },\n    'click .Mongol_subscription_toggle': function () {\n      Meteor.default_connection._subscriptions[this].stop()\n    },\n    'click .Mongol_contentView': function(e, t) {\n      e.stopPropagation();\n    }\n  });\n\n\n// Object for subscriptions\n// var subscriptions = Meteor.default_connection._subscriptions\n// Object.observe polyfill\n\n// Template.Mongol_subscriptions.helpers({\n//  subscription: function () {\n//    var data = MongolSubData.get()\n//    return data;\n//  },\n//  subscriptionParams: function() {\n//    return this.params\n//  }\n// });\n\n// Template.Mongol_subscriptions.events({\n//  'click .Mongol_stop_subscription': function () {\n//    this.stop()\n//  },\n//  'click #createNewSub': function () {\n\n//    var argument = false,\n//      stuff = [];\n    \n//    var askForArgument = function () {\n//      argument = prompt(\"What is the name of your subscription?\");\n//      addArgument(argument);\n//    }\n    \n//    var addArgument = function (argument) {\n//      if (argument) {\n//        stuff.push(argument);\n//        askForArgument();\n//      } else {\n//        Meteor.subscribe.apply(Meteor, stuff); \n//      }\n//    }\n\n//    askForArgument();\n\n//  }\n// });","\nTemplate.body.addContent((function() {\n  var view = this;\n  return Spacebars.include(view.lookupTemplate(\"Mongol\"));\n}));\nMeteor.startup(Template.body.renderToDocument);\n\nTemplate.__checkName(\"Mongol\");\nTemplate[\"Mongol\"] = new Template(\"Template.Mongol\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"MeteorToys\"));\n  }, function() {\n    return [ \"\\n\t\t\\n\t\t\", HTML.DIV({\n      id: \"Mongol\",\n      \"class\": function() {\n        return [ Spacebars.mustache(view.lookup(\"active\")), \" MeteorToys\" ];\n      }\n    }, \"\\n\t\t\t\\n\t\t\t\", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"MeteorToys_Pro\"));\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_header_pro\")), \"\\n\t\t\t\" ];\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_header\")), \"\\n\t\t\t\" ];\n    }), \"\\n\\n\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_account\")), \"\\n\\n\t\t\t\", Blaze.Unless(function() {\n      return Spacebars.call(view.lookup(\"MeteorToys_Pro\"));\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_subscriptions\")), \"\\n\t\t\t\" ];\n    }), \"\\n\\n\t\t\t\", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"Mongol_collections\"));\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_collection\")), \"\\n\t\t\t\" ];\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_collection_notFound\")), \"\\n\t\t\t\" ];\n    }), \"\\n\\n\t\t\t\", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"MeteorToys_Pro\"));\n    }, function() {\n      return [ \"\\n\t\t\t\t\", Spacebars.include(view.lookupTemplate(\"Mongol_trash\")), \"\\n\t\t\t\" ];\n    }), \"\\n\\n\t\t\"), \"\\n\t\t\\n\t\" ];\n  });\n}));\n","Template.Mongol.helpers({\n  Mongol_collections: function () {\n    var MongolConfig = Session.get(\"Mongol\");\n    return MongolConfig && _.without(MongolConfig.collections, null) || [];\n  },\n  active: function () {\n    var MongolCollection = Session.get(\"Mongol_currentCollection\");\n    if (MongolCollection) {\n      return ((Session.get(\"Mongol_fullscreen\")) ? \"Mongol_fullscreen \" : \"\") + \"Mongol_expand\";\n    }\n  }\n});\n\n\n// Namespaced Functions\n\nMongolPackage = {\n  'colorize': function (json) {\n    // colorized the JSON objects\n    if (typeof json != 'string') {\n      json = JSON.stringify(json, undefined, 2);\n    }\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function(match) {\n      var cls = 'Mongol_number';\n      if (/^\"/.test(match)) {\n        if (/:$/.test(match)) {\n          cls = 'Mongol_key';\n        } else {\n          cls = 'Mongol_string';\n        }\n      } else if (/true|false/.test(match)) {\n        cls = 'Mongol_boolean';\n      } else if (/null/.test(match)) {\n        cls = 'Mongol_null';\n      }\n      return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n  },\n  'getDocumentUpdate': function (data) {\n\n    var elementID = 'MongolDoc_' + data,\n      newData = document.getElementById(elementID).textContent;\n\n    return newData;\n\n  },\n  'error': function (data) {\n\n    switch (data) {\n      case \"json.parse\":\n        alert(\"There is an error with your JSON syntax.\\n\\nNote: keys and string values need double quotes.\");\n        break;\n      case \"duplicate\":\n        alert(\"Strange, there was an error duplicating your document.\");\n        break;\n      case \"remove\":\n        alert(\"Strange, there was an error removing your document.\");\n        break;\n      case \"insert\":\n        alert(\"Strange, there was an error inserting your document.\");\n        break;\n      case \"update\":\n        alert(\"There was an error updating your document. Please review your changes and try again.\");\n        break;\n      case \"permission\":\n        // under consideration\n        alert(\"This Meteor applications looks to be deployed in debug mode. Mongol cannot edit this document because it onlys works if the absolute URL beings with 'http://localhost:'\")\n      default:\n        return \"Request Credentials\";\n        break;\n    }\n\n  },\n  'parse': function (data) {\n    var newObject = false;\n\n    try {\n      newObject = JSON.parse(data);\n    } catch (error) {\n      MongolPackage.error(\"json.parse\");\n    }\n\n    return newObject;\n\n  },\n  'setSubscriptionKeys': function () {\n\n      var subscriptions  = Meteor.default_connection._subscriptions,\n          subKeys        = Object.keys(subscriptions);\n\n          Session.set(\"MeteorToys_PubSub\", subKeys)\n\n  }\n};\n\n\n// default.js\n\nMeteor.startup(function() {\n  \n  // If the user hasn't done a Session.set('Mongol',{ ... });\n  // set some default values\n  if (Session.get('Mongol') === undefined) {\n\n  // Build a default config object\n  // Build a default config object\n\n    var collections = _.map(Mongo.Collection.getAll(), function (collection) {\n\n      // Note this returns the actual mongo collection name, not Meteor's Mongo.Collection name\n      return collection.name;\n\n    });\n\n    var defaults = {\n      'collections': collections,\n    };\n\n    Session.set(\"Mongol\", defaults);\n\n  }\n});\n\n\n// Give devs an api for hiding some collections, since they're all matched by default\n\nMongol.hideCollection = function (collectionName) {\n\n  var MongolConfig = Session.get(\"Mongol\") || {},\n    collections = MongolConfig.collections || {};\n\n  collections = _.without(collections, collectionName);\n\n  MongolConfig.collections = collections;\n\n  Session.set(\"Mongol\", MongolConfig);\n  \n}\n\nMeteor.startup(function () {\n  Mongol.hideCollection(\"MeteorToysData_Impersonate\");\n  Mongol.hideCollection(\"MeteorToysData_Methods\");\n  Mongol.hideCollection(\"MeteorToysData_Settings\");\n  // Mongol.hideCollection(\"MeteorToysData_Mongol\");\n});","\nTemplate.__checkName(\"Mongol_docControls\");\nTemplate[\"Mongol_docControls\"] = new Template(\"Template.Mongol_docControls\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"active\"));\n  }, function() {\n    return [ \"\\n\t\t\\n\t\t\", HTML.DIV({\n      \"class\": function() {\n        return [ \"Mongol_docMenu \", Spacebars.mustache(view.lookup(\"Mongol_docMenu_editing\")) ];\n      }\n    }, \"\\n\t\t\t\", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"account\"));\n    }, function() {\n      return [ \"\\n\t\t\t\t\", HTML.DIV({\n        \"class\": \"Mongol_docBar1\"\n      }, \"\\n\t\t\t\t\t\", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"editing\"));\n      }, function() {\n        return [ \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_edit_title\"\n        }, \"Update Document\"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_edit_save\"\n        }, \"Save\"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_edit_cancel\"\n        }, \"Cancel\"), \"\\n\t\t\t\t\t\" ];\n      }, function() {\n        return [ \"\t\\n\t\t\t\t\t\t\\n                        \", HTML.Comment(\"For some reason, the method in place does not work for this\\n                        Commenting out for now\"), \"\\n                        \", HTML.DIV({\n          \"class\": \"Mongol_m_edit Mongol_m_updateAccount\"\n        }, \"Update\"), \"\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t\", HTML.Comment(\" &nbsp;Currently Read-Only \"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_m_signout\"\n        }, \"Sign Out\"), \"\\n                        \\n\t\t\t\t\t\" ];\n      }), \"\\n\t\t\t\t\"), \"\\n\t\t\t\" ];\n    }, function() {\n      return [ \"\\n\t\t\t\t\", HTML.DIV({\n        \"class\": \"Mongol_docBar1\"\n      }, \"\\n\t\t\t\t\t\", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"editing\"));\n      }, function() {\n        return [ \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_edit_title\"\n        }, \"Update Document\"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_edit_save\"\n        }, \"Save\"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_edit_cancel\"\n        }, \"Cancel\"), \"\\n\t\t\t\t\t\" ];\n      }, function() {\n        return [ \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_m_edit\"\n        }, \"Update\"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_m_new\"\n        }, \"Duplicate\"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": \"Mongol_m_delete\"\n        }, \"Remove\"), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": function() {\n            return [ Spacebars.mustache(view.lookup(\"disable_right\")), \" Mongol_m_right\" ];\n          }\n        }, HTML.CharRef({\n          html: \"&rsaquo;\",\n          str: \"›\"\n        })), \"\\n\t\t\t\t\t\t\", HTML.DIV({\n          \"class\": function() {\n            return [ Spacebars.mustache(view.lookup(\"disable_left\")), \" Mongol_m_left\" ];\n          }\n        }, HTML.CharRef({\n          html: \"&lsaquo;\",\n          str: \"‹\"\n        })), \"\\n\t\t\t\t\t\" ];\n      }), \"\\n\t\t\t\t\"), \"\\n\t\t\t\" ];\n    }), \"\t\\n\t\t\"), \"\\n\\n\t\" ];\n  }, function() {\n    return [ \"\\n\\n\t\t\", HTML.DIV({\n      \"class\": \"Mongol_docMenu\"\n    }, \"\\n\t\t\t\", HTML.DIV({\n      \"class\": \"Mongol_docBar1\"\n    }, \"\\n\t\t\t\t\", HTML.CharRef({\n      html: \"&nbsp;\",\n      str: \" \"\n    }), \"\\n\t\t\t\"), \"\\n\t\t\"), \"\\n\\n\t\" ];\n  });\n}));\n","// Strip out functions in case documents have had methods added to them\n\nMongol.validateDocument = function (doc) {\n  var validatedDoc = {};\n  _.each(doc, function (val, key) {\n    if (_.isFunction(val)) {\n      return;\n    }\n    validatedDoc[key] = val;\n  });\n  return validatedDoc;\n}\n\nMongol.inlineEditingTimer = null;\n\nMongol.resetInlineEditingTimer = function() {\n  if (Mongol.inlineEditingTimer) {\n\tMeteor.clearTimeout(Mongol.inlineEditingTimer);\n  }\n  Session.set('Mongol_noInlineEditing', true);\n  Mongol.inlineEditingTimer = Meteor.setTimeout(function () {\n    Session.set('Mongol_noInlineEditing', false);  \n  },300);\n}\n\nTemplate.Mongol_docControls.events({\n  'click .Mongol_m_new': function() {\n\n    var CollectionName = Session.get(\"Mongol_currentCollection\"),\n      DocumentPosition = Session.get(\"Mongol_\" + String(this)),\n      CurrentCollection = Mongol.Collection(CollectionName).find().fetch(),\n      CollectionCount = Mongol.Collection(CollectionName).find().count();\n\n    var CurrentDocument = CurrentCollection[DocumentPosition],\n      DocumentID = CurrentDocument._id,\n      sessionKey = \"Mongol_\" + String(this);\n\n    var ValidatedCurrentDocument = Mongol.validateDocument(CurrentDocument);\n\n    Meteor.call(\"Mongol_duplicate\", CollectionName, ValidatedCurrentDocument._id, function(error, result) {\n      if (!error) {\n\n        if (Mongol.Collection(CollectionName).findOne(result)) {\n\n          // Get position of new document\n          var list = Mongol.Collection(CollectionName).find().fetch();\n          var docID = result;\n\n          docIndex = $.map(list, function(obj, index) {\n            if (obj._id == docID) {\n              return index;\n            }\n          })\n\n          Session.set(sessionKey, Number(docIndex));\n        }\n\n      } else {\n        MongolPackage.error(\"duplicate\");\n      }\n    });\n\n\n\n  },\n  'click .Mongol_m_edit': function() {\n    Session.set(\"Mongol_editMode\", true);\n  },\n  'click .Mongol_m_delete': function() {\n\n    var CollectionName = Session.get(\"Mongol_currentCollection\"),\n      sessionKey = \"Mongol_\" + String(this);\n    DocumentPosition = Session.get(sessionKey),\n      CurrentCollection = Mongol.Collection(CollectionName).find().fetch(),\n      CollectionCount = Mongol.Collection(CollectionName).find().count();\n\n    var CurrentDocument = CurrentCollection[DocumentPosition],\n      DocumentID = CurrentDocument._id;\n\n\n\n    Meteor.call('Mongol_remove', CollectionName, DocumentID, function(error, result) {\n\n      if (!error) {\n        // Log the action\n        console.log(\"Removed \" + DocumentID + \" from \" + CollectionName + \". Back-up below:\");\n        console.log(CurrentDocument);\n\n        // Adjust the position\n        if (DocumentPosition >= CollectionCount - 1) {\n          newPosition = DocumentPosition - 1;\n          Session.set(sessionKey, newPosition);\n        }\n\n        if (Session.get(sessionKey) === -1) {\n          Session.set(sessionKey, 0);\n        }\n\n\n      } else {\n        MongolPackage.error(\"remove\");\n      }\n\n    });\n\n\n\n  },\n  'click .Mongol_m_right': function() {\n    // Verify that the button is not disabled\n    if (!$('.Mongol_m_right').hasClass('Mongol_m_disabled')) {\n      \n      // Disable inline editing for 0.3s for quick flick to next doc\n      Mongol.resetInlineEditingTimer();\n\t  \n      // Grab the key\n      sessionKey = \"Mongol_\" + String(this);\n\n      // Go forward one doc\n      var MongolDocNumber = Session.get(sessionKey) + 1;\n      Session.set(sessionKey, MongolDocNumber);\n      // console.log(\"right\" + this);\n    }\n  },\n  'click .Mongol_m_left': function() {\n\n    // Verify that the button is not disabled\n    if (!$('.Mongol_m_left').hasClass('Mongol_m_disabled')) {\n\n      // Disable inline editing for 0.3s for quick flick to next doc\n      Mongol.resetInlineEditingTimer();\n      \n      // Grab the key\n      sessionKey = \"Mongol_\" + String(this);\n\n      // Go back one doc\n      var MongolDocNumber = Session.get(sessionKey) - 1;\n      Session.set(sessionKey, MongolDocNumber);\n      // console.log(\"left\" + this);\n    }\n\n  },\n  'click .Mongol_edit_save': function() {\n\n    // Get current document to get its current state\n    // We need to send this to the server so we know which fields are up for change\n    // when applying the diffing algorithm\n\n    var collectionName = (Session.equals(\"Mongol_currentCollection\", \"account_618\")) ? \"users\" : String(this);\n\n    if (Session.equals(\"Mongol_currentCollection\", \"account_618\")) {\n      var newData = MongolPackage.getDocumentUpdate(\"account_618\");\n      var newObject = MongolPackage.parse(newData);\n      var oldObject = Meteor.user();\n      // console.log(targetCollection);\n      // console.log(newData);\n      // console.log(newObject);\n    } else {\n      var sessionKey = \"Mongol_\" + collectionName;\n      DocumentPosition = Session.get(sessionKey),\n        CurrentCollection = Mongol.Collection(collectionName).find().fetch();\n      var newData = MongolPackage.getDocumentUpdate(collectionName);\n      var newObject = MongolPackage.parse(newData);\n      var oldObject = CurrentCollection[DocumentPosition];\n    }\n\n    if (newObject) {\n      Meteor.call(\"Mongol_update\", collectionName, newObject, Mongol.validateDocument(oldObject), function(error, result) {\n        if (!error) {\n          Session.set('Mongol_editMode', null);\n          console.log('success')\n        } else {\n          MongolPackage.error('update')\n        }\n      });\n    }\n  },\n  'click .Mongol_edit_cancel': function() {\n    Session.set('Mongol_editMode', null);\n  },\n  'click .Mongol_m_signout': function() {\n    Meteor.logout();\n  },\n});\n\n\nTemplate.Mongol_docControls.helpers({\n  disable_right: function() {\n    var sessionKey = \"Mongol_\" + String(this);\n    var CurrentDocument = Session.get(sessionKey);\n    var collectionName = String(this);\n    var collectionVar = Mongol.Collection(collectionName);\n\n    var collectionCount = collectionVar.find().count() - 1;\n\n    if (CurrentDocument === collectionCount) {\n      return \"Mongol_m_disabled\";\n    }\n\n  },\n  editing: function() {\n    var editing = Session.get('Mongol_editMode');\n    return editing;\n  },\n  editing_class: function() {\n    var edit = Session.get('Mongol_editMode');\n    if (edit) {\n      return \"Mongol_m_wrapper_expand\"\n    }\n  },\n  disable_left: function() {\n    var sessionKey = \"Mongol_\" + String(this);\n    var CurrentDocument = Session.get(sessionKey);\n\n    if (CurrentDocument <= 0) {\n      return \"Mongol_m_disabled\";\n    }\n\n  },\n  Mongol_docMenu_editing: function() {\n    var editMode = Session.get(\"Mongol_editMode\");\n\n    if (editMode) {\n      return \"Mongol_docMenu_editing\";\n    }\n\n  },\n  active: function() {\n\n    var current = Session.get(\"Mongol_currentCollection\");\n\n    // return true if collection name matches\n    if (current === String(this)) {\n      return true;\n    }\n\n    // return true if it's a user account\n    if (current === \"account_618\") {\n      return true;\n    }\n\n  },\n  account: function() {\n\n    var currentCollection = Session.get(\"Mongol_currentCollection\");\n    if (currentCollection === \"account_618\") {\n      return true\n    } else {\n      return false\n    }\n  },\n\n});\n\n// Will possibly be used in augmented document udpate UI\n/*Template.Mongol_docViewer.events({\n'click .Mongol_string' : function (evt,tmpl) {\nvar field = $(evt.target).prevAll(\".Mongol_key:first\").text().slice(1,-2);\nSession.set('Mongol_inlineEdit',true);\nTracker.flush();\n// Do something to trigger the editable text element\n}\n});*/\n"]}